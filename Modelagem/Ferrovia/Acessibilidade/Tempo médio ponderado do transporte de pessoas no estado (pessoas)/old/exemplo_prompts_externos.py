"""
üéØ EXEMPLO PR√ÅTICO: Prompts Externos + Conversa Direta
Demonstra como definir prompts fora da aplica√ß√£o e usar via FastAPI Proxy
Para usar: docker exec -it fastapi-proxy python exemplo_prompts_externos.py
"""

from chat_client import ChatClient


class MeusPrompts:
    """Classe com prompts personalizados definidos externamente"""
    
    @staticmethod
    def prompt_extracao_ferroviaria(texto: str) -> str:
        """Prompt para extrair dados ferrovi√°rios"""
        return f"""
Voc√™ √© um especialista em an√°lise de dados de transporte ferrovi√°rio.

TAREFA: Extrair TODOS os dados quantitativos do texto a seguir.

TEXTO:
{texto}

INSTRU√á√ïES:
1. Identifique TODOS os n√∫meros, valores, medidas
2. Organize por categorias (financeiro, t√©cnico, operacional)
3. Retorne em formato JSON estruturado
4. Inclua unidades de medida
5. Se um dado n√£o existir, use null

FORMATO DE SA√çDA (JSON):
{{
  "dados_tecnicos": {{
    "extensao_km": null,
    "num_estacoes": null,
    "velocidade_max_kmh": null,
    "bitola_metros": null,
    "capacidade_passageiros": null
  }},
  "dados_financeiros": {{
    "investimento_total": null,
    "tarifa_basica": null,
    "receita_anual": null,
    "custo_operacional": null
  }},
  "dados_operacionais": {{
    "demanda_diaria": null,
    "frequencia_servico": null,
    "tempo_viagem_min": null,
    "horario_funcionamento": null
  }},
  "localizacao": {{
    "municipios": [],
    "estados": [],
    "coordenadas": null
  }},
  "cronograma": {{
    "data_inauguracao": null,
    "prazo_construcao": null,
    "fase_projeto": null
  }}
}}

IMPORTANTE: Responda APENAS com o JSON, sem explica√ß√µes adicionais.
"""

    @staticmethod
    def prompt_analise_viabilidade(dados_json: str) -> str:
        """Prompt para an√°lise de viabilidade"""
        return f"""
Voc√™ √© um consultor especialista em viabilidade de projetos ferrovi√°rios.

DADOS DO PROJETO (JSON):
{dados_json}

TAREFA: Realizar an√°lise de viabilidade completa.

AN√ÅLISE SOLICITADA:
1. **Viabilidade T√©cnica**: Avalie aspectos t√©cnicos (extens√£o, capacidade, velocidade)
2. **Viabilidade Financeira**: Calcule indicadores (payback, ROI estimado, receita/km)
3. **Viabilidade Operacional**: Analise demanda vs capacidade, frequ√™ncia
4. **Riscos Identificados**: Liste principais riscos e mitiga√ß√µes
5. **Recomenda√ß√µes**: Pr√≥ximos passos e melhorias sugeridas

FORMATO DE RESPOSTA:
Para cada categoria, d√™ uma nota de 1-10 e justificativa de 2-3 linhas.

C√ÅLCULOS SOLICITADOS:
- Se houver receita anual e investimento: calcule payback simples
- Se houver demanda e tarifa: estime receita potencial
- Se houver extens√£o e investimento: calcule custo por km

Seja objetivo e t√©cnico nas an√°lises.
"""

    @staticmethod
    def prompt_comparacao_projetos(projeto1: str, projeto2: str) -> str:
        """Prompt para comparar dois projetos"""
        return f"""
Voc√™ √© um analista de projetos de transporte ferrovi√°rio.

PROJETO A:
{projeto1}

PROJETO B:
{projeto2}

TAREFA: Compare os dois projetos em uma tabela estruturada.

CRIT√âRIOS DE COMPARA√á√ÉO:
1. Extens√£o (km)
2. Investimento total
3. Custo por km
4. Capacidade de passageiros
5. Receita anual estimada
6. Payback simples
7. Impacto social (munic√≠pios atendidos)
8. Complexidade t√©cnica

FORMATO DE SA√çDA:
| Crit√©rio | Projeto A | Projeto B | Vencedor | Justificativa |
|----------|-----------|-----------|----------|---------------|
| ... | ... | ... | ... | ... |

Ao final, recomende qual projeto tem melhor custo-benef√≠cio e por qu√™.
"""

    @staticmethod
    def prompt_relatorio_executivo(dados: str) -> str:
        """Prompt para gerar relat√≥rio executivo"""
        return f"""
Voc√™ √© um diretor de planejamento de transporte. Crie um relat√≥rio executivo conciso.

DADOS DO PROJETO:
{dados}

ESTRUTURA DO RELAT√ìRIO:

# SUM√ÅRIO EXECUTIVO
## Dados Principais
- [Liste os 5 dados mais importantes em bullets]

## Viabilidade Geral
- [Avalia√ß√£o em uma frase]

## Investimento e Retorno
- [Valores principais e payback]

## Recomenda√ß√£o
- [APROVADO / APROVADO COM RESSALVAS / REJEITADO]
- [Justificativa em 2 linhas]

## Pr√≥ximos Passos
- [3 a√ß√µes priorit√°rias]

LIMITE: M√°ximo 200 palavras. Seja direto e executivo.
"""


def demonstracao_prompts_externos():
    """Demonstra uso de prompts definidos externamente"""
    print("üéØ DEMONSTRA√á√ÉO: Prompts Externos + Conversa Direta")
    print("=" * 60)
    
    # Inicializar cliente
    client = ChatClient()
    
    # Verificar status
    status = client.verificar_status()
    if status["status"] != "disponivel":
        print("‚ùå Sistema n√£o dispon√≠vel. Execute 'start_simple.ps1' primeiro.")
        return
    
    # Pegar modelo dispon√≠vel
    modelos = client.listar_modelos()
    if not modelos:
        print("‚ùå Nenhum modelo dispon√≠vel.")
        return
    
    modelo = modelos[0]
    print(f"ü§ñ Usando modelo: {modelo}")
    
    # Dados de exemplo
    texto_exemplo = """
    Projeto FER-025 - Linha Express S√£o Paulo-Campinas
    
    DADOS T√âCNICOS:
    - Extens√£o total: 118,5 km
    - Bitola: Larga (1,60m)
    - Esta√ß√µes: 8 paradas principais
    - Velocidade m√°xima: 160 km/h
    - Velocidade comercial: 120 km/h
    - Capacidade: 2.400 passageiros por composi√ß√£o
    
    DADOS FINANCEIROS:
    - Investimento total: R$ 12,8 bilh√µes
    - Tarifa b√°sica: R$ 15,90
    - Tarifa expressa: R$ 22,50
    - Receita anual estimada: R$ 892 milh√µes
    - Custo operacional anual: R$ 245 milh√µes
    
    OPERA√á√ÉO:
    - Demanda projetada: 95.000 passageiros/dia
    - Frequ√™ncia: 15 minutos (pico), 30 minutos (normal)
    - Tempo de viagem: 42 minutos
    - Funcionamento: 5h √†s 24h
    
    LOCALIZA√á√ÉO:
    - Munic√≠pios: S√£o Paulo, Osasco, Barueri, Jundia√≠, Campinas
    - Estados: S√£o Paulo
    - Data prevista de inaugura√ß√£o: Dezembro/2027
    """
    
    # Teste 1: Extra√ß√£o de dados
    print("\nüìä TESTE 1: Extra√ß√£o de dados estruturados")
    print("-" * 50)
    
    prompt_extracao = MeusPrompts.prompt_extracao_ferroviaria(texto_exemplo)
    
    resultado_extracao = client.conversar(
        prompt=prompt_extracao,
        modelo=modelo,
        temperature=0.1  # Baixa criatividade para extra√ß√£o precisa
    )
    
    if resultado_extracao["sucesso"]:
        print("‚úÖ Dados extra√≠dos com sucesso!")
        dados_json = resultado_extracao["resposta"]
        print(f"üìã JSON extra√≠do:\n{dados_json}")
        
        # Teste 2: An√°lise de viabilidade
        print("\nüìà TESTE 2: An√°lise de viabilidade")
        print("-" * 50)
        
        prompt_viabilidade = MeusPrompts.prompt_analise_viabilidade(dados_json)
        
        resultado_viabilidade = client.conversar(
            prompt=prompt_viabilidade,
            modelo=modelo,
            temperature=0.3  # Moderada criatividade para an√°lise
        )
        
        if resultado_viabilidade["sucesso"]:
            print("‚úÖ An√°lise de viabilidade:")
            print(resultado_viabilidade["resposta"])
        
        # Teste 3: Relat√≥rio executivo
        print("\nüìÑ TESTE 3: Relat√≥rio executivo")
        print("-" * 50)
        
        prompt_relatorio = MeusPrompts.prompt_relatorio_executivo(texto_exemplo)
        
        resultado_relatorio = client.conversar(
            prompt=prompt_relatorio,
            modelo=modelo,
            temperature=0.2  # Baixa criatividade para relat√≥rio formal
        )
        
        if resultado_relatorio["sucesso"]:
            print("‚úÖ Relat√≥rio executivo:")
            print(resultado_relatorio["resposta"])
    
    else:
        print(f"‚ùå Erro na extra√ß√£o: {resultado_extracao['erro']}")


def exemplo_conversa_interativa():
    """Exemplo de conversa interativa"""
    print("\nüí¨ EXEMPLO: Conversa Interativa")
    print("=" * 40)
    
    client = ChatClient()
    modelos = client.listar_modelos()
    
    if modelos:
        modelo = modelos[0]
        print(f"ü§ñ Conversando com: {modelo}")
        
        perguntas = [
            "Quais s√£o os principais benef√≠cios do transporte ferrovi√°rio?",
            "Como calcular a viabilidade financeira de um projeto ferrovi√°rio?",
            "Quais fatores influenciam a demanda de passageiros em trens urbanos?"
        ]
        
        for i, pergunta in enumerate(perguntas, 1):
            print(f"\n‚ùì Pergunta {i}: {pergunta}")
            
            resposta = client.conversar_simples(pergunta, modelo)
            print(f"ü§ñ Resposta: {resposta[:200]}...")


def exemplo_diferentes_temperaturas():
    """Exemplo mostrando diferentes configura√ß√µes de temperatura"""
    print("\nüå°Ô∏è EXEMPLO: Diferentes Temperaturas")
    print("=" * 40)
    
    client = ChatClient()
    modelos = client.listar_modelos()
    
    if modelos:
        modelo = modelos[0]
        prompt_base = "Descreva em uma frase os benef√≠cios do transporte ferrovi√°rio."
        
        temperaturas = [0.1, 0.5, 0.9]
        
        for temp in temperaturas:
            print(f"\nüå°Ô∏è Temperatura {temp}:")
            resultado = client.conversar(
                prompt=prompt_base,
                modelo=modelo,
                temperature=temp
            )
            
            if resultado["sucesso"]:
                print(f"üìù {resultado['resposta']}")


if __name__ == "__main__":
    print("üöÄ SISTEMA DE PROMPTS EXTERNOS + CONVERSA DIRETA")
    print("=" * 70)
    print("üí° Ideia: Prompts definidos fora da aplica√ß√£o, FastAPI s√≥ transita")
    print("üéØ Vantagem: Controle total sobre prompts + flexibilidade m√°xima")
    print("=" * 70)
    
    demonstracao_prompts_externos()
    exemplo_conversa_interativa()
    exemplo_diferentes_temperaturas()
    
    print("\n‚ú® DEMONSTRA√á√ÉO CONCLU√çDA!")
    print("üí° Agora voc√™ pode criar seus pr√≥prios prompts e usar via FastAPI proxy!")
