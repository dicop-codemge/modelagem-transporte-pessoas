"""
üöÄ PROMPT PARA EXTRA√á√ÉO M√ÅXIMA DE DADOS TABULARES

Este m√≥dulo cont√©m prompts especializados para extra√ß√£o m√°xima de informa√ß√µes
de textos e convers√£o em dados tabulares estruturados.

Uso:
    from prompt_extracao_maxima import PromptExtracao
    
    extrator = PromptExtracao()
    prompt = extrator.gerar_prompt_principal(texto)
    # Enviar prompt para LLM
    resultado = llm.completar(prompt)
"""

import json
from typing import Dict, List, Any, Optional

class PromptExtracao:
    """
    Classe para gerar prompts especializados em extra√ß√£o m√°xima de dados
    """
    
    def __init__(self):
        self.prompt_base = self._definir_prompt_base()
        self.contextos_especializados = self._definir_contextos()
        
    def _definir_prompt_base(self) -> str:
        """Define o prompt principal para extra√ß√£o m√°xima"""
        return """
Voc√™ √© um especialista em extra√ß√£o de dados estruturados e tabulares. Sua miss√£o √© extrair TODAS as informa√ß√µes poss√≠veis de uma string de texto e organiz√°-las em formato tabular/estruturado.

INSTRU√á√ïES CR√çTICAS:
1. Extraia TUDO que parecer ser um dado, valor, m√©trica ou informa√ß√£o quantific√°vel
2. Organize os dados em categorias l√≥gicas 
3. Capture tanto dados expl√≠citos quanto impl√≠citos
4. Identifique padr√µes, relacionamentos e hierarquias
5. Preserve contexto e metadados
6. Seja extremamente detalhista e exaustivo

TEXTO PARA AN√ÅLISE:
{texto}

FORMATO DE SA√çDA ESPERADO:
Retorne um JSON estruturado com as seguintes se√ß√µes:

{{
  "dados_identificados": {{
    "valores_numericos": [
      {{
        "valor": "123.45",
        "unidade": "R$",
        "contexto": "pre√ßo da passagem",
        "confianca": 0.95,
        "posicao_texto": "linha 15"
      }}
    ],
    "valores_textuais": [
      {{
        "campo": "nome_projeto",
        "valor": "Linha F√©rrea XYZ",
        "contexto": "identifica√ß√£o do empreendimento",
        "confianca": 0.90
      }}
    ],
    "datas_temporais": [
      {{
        "data": "2024-01-15",
        "formato_original": "15/01/2024",
        "contexto": "data de inaugura√ß√£o",
        "confianca": 0.85
      }}
    ],
    "coordenadas_geograficas": [
      {{
        "latitude": -19.5555,
        "longitude": -43.7777,
        "local": "Esta√ß√£o Central",
        "contexto": "localiza√ß√£o da esta√ß√£o"
      }}
    ]
  }},
  "estruturas_detectadas": {{
    "tabelas": [
      {{
        "cabecalho": ["Coluna1", "Coluna2", "Coluna3"],
        "linhas": [
          ["valor1", "valor2", "valor3"],
          ["valor4", "valor5", "valor6"]
        ],
        "contexto": "tabela de tarifas",
        "confianca": 0.92
      }}
    ],
    "listas": [
      {{
        "tipo": "municipios_atendidos",
        "itens": ["Belo Horizonte", "Contagem", "Betim"],
        "contexto": "cidades servidas pela linha",
        "confianca": 0.88
      }}
    ],
    "hierarquias": [
      {{
        "nivel1": "Transporte Ferrovi√°rio",
        "nivel2": "Passageiros",
        "nivel3": "Linha Metropolitana",
        "contexto": "classifica√ß√£o do servi√ßo"
      }}
    ]
  }},
  "padroes_identificados": {{
    "codigos": [
      {{
        "codigo": "FER-001",
        "tipo": "projeto",
        "contexto": "identifica√ß√£o do projeto ferrovi√°rio",
        "confianca": 0.90
      }}
    ],
    "formulas": [
      {{
        "formula": "Receita = Passageiros √ó Tarifa",
        "variaveis": ["Receita", "Passageiros", "Tarifa"],
        "contexto": "c√°lculo de receita",
        "confianca": 0.75
      }}
    ],
    "relacoes": [
      {{
        "origem": "demanda_passageiros",
        "destino": "receita_anual",
        "tipo": "correlacao_positiva",
        "contexto": "mais passageiros geram mais receita"
      }}
    ]
  }},
  "metadados_contextuais": {{
    "dominio": "transporte_ferroviario",
    "subdominios": ["passageiros", "tarifas", "operacao"],
    "palavras_chave": ["ferrovia", "passageiros", "esta√ß√£o", "tarifa"],
    "entidades_nomeadas": [
      {{
        "nome": "Esta√ß√£o Central",
        "tipo": "local",
        "contexto": "ponto de parada"
      }}
    ],
    "metricas_qualidade": {{
      "completude": 0.85,
      "precisao": 0.90,
      "consistencia": 0.88
    }}
  }},
  "dados_derivados": {{
    "calculos_possiveis": [
      {{
        "nome": "receita_por_km",
        "formula": "receita_total / extensao_km",
        "disponibilidade": "possivel",
        "valores_necessarios": ["receita_total", "extensao_km"]
      }}
    ],
    "tendencias": [
      {{
        "variavel": "demanda_passageiros",
        "tendencia": "crescente",
        "periodo": "2020-2024",
        "confianca": 0.70
      }}
    ],
    "anomalias": [
      {{
        "campo": "velocidade_operacional",
        "valor": "300 km/h",
        "motivo": "valor muito alto para ferrovia convencional",
        "sugestao": "verificar se √© trem de alta velocidade"
      }}
    ]
  }},
  "recomendacoes_melhoria": {{
    "dados_faltantes": [
      "coordenadas_estacoes",
      "horarios_operacao",
      "capacidade_por_composicao"
    ],
    "validacoes_sugeridas": [
      "verificar consist√™ncia de unidades",
      "validar datas cronologicamente",
      "confirmar valores monet√°rios"
    ],
    "expansoes_possiveis": [
      "buscar dados complementares em outras fontes",
      "calcular indicadores de performance",
      "criar series temporais"
    ]
  }}
}}

REGRAS DE EXTRA√á√ÉO:
1. Seja EXTREMAMENTE detalhista
2. Capture at√© informa√ß√µes aparentemente irrelevantes
3. Identifique padr√µes sutis no texto
4. Preserve SEMPRE o contexto original
5. Atribua n√≠veis de confian√ßa realistas
6. Sugira relacionamentos entre dados
7. Identifique poss√≠veis erros ou inconsist√™ncias
8. Proponha dados derivados calcul√°veis
9. Mantenha rastreabilidade (posi√ß√£o no texto)
10. Classifique dados por dom√≠nio/categoria

ATEN√á√ÉO ESPECIAL PARA:
- N√∫meros com unidades (R$, km, km/h, passageiros, etc.)
- C√≥digos alfanum√©ricos (FER-001, etc.)
- Nomes pr√≥prios (cidades, esta√ß√µes, projetos)
- Datas em qualquer formato
- Coordenadas geogr√°ficas
- Percentuais e propor√ß√µes
- Intervalos e ranges (10-15 min)
- Dados t√©cnicos (bitola, capacidade, etc.)
- Informa√ß√µes operacionais (hor√°rios, frequ√™ncia)
- Dados financeiros (investimentos, receitas, custos)

SEJA IMPLAC√ÅVEL NA EXTRA√á√ÉO - NADA DEVE PASSAR DESPERCEBIDO!
"""

    def _definir_contextos(self) -> Dict[str, str]:
        """Define contextos especializados para diferentes dom√≠nios"""
        return {
            "ferroviario": """
CONTEXTO: Dados de transporte ferrovi√°rio de passageiros
FOCO ESPECIAL EM: tarifas, demanda, esta√ß√µes, extens√£o, bitola, velocidade, capacidade, receitas, investimentos, munic√≠pios atendidos, tempos de viagem, frequ√™ncia de servi√ßo

CAMPOS PRIORIT√ÅRIOS:
- Pre√ßos e tarifas (R$)
- Demanda de passageiros (passageiros/dia, m√™s, ano)
- Extens√£o da linha (km)
- N√∫mero de esta√ß√µes
- Tipo de bitola (m√©trica, larga, estreita)
- Velocidade operacional (km/h)
- Capacidade dos trens (passageiros)
- Receitas (anual, por km)
- Investimentos totais
- Munic√≠pios/cidades atendidas
- Tempos de viagem (ida e volta)
- Frequ√™ncia de servi√ßo (trens/dia)
- C√≥digos de projeto (FER-XXX)
""",
            "financeiro": """
CONTEXTO: Dados financeiros e econ√¥micos
FOCO ESPECIAL EM: valores monet√°rios, percentuais, indicadores, custos, receitas, investimentos, retorno, viabilidade

CAMPOS PRIORIT√ÅRIOS:
- Valores em moeda (R$, USD, EUR)
- Percentuais e taxas (%, p.a.)
- Indicadores financeiros (ROI, VPL, TIR)
- Custos operacionais
- Receitas e faturamento
- Investimentos (CAPEX, OPEX)
- Fluxos de caixa
- Prazos e per√≠odos
- Infla√ß√£o e corre√ß√£o monet√°ria
""",
            "geografico": """
CONTEXTO: Dados geogr√°ficos e territoriais
FOCO ESPECIAL EM: coordenadas, dist√¢ncias, √°reas, munic√≠pios, regi√µes, rotas, altitudes

CAMPOS PRIORIT√ÅRIOS:
- Coordenadas (latitude, longitude)
- Dist√¢ncias (km, metros)
- √Åreas (km¬≤, hectares)
- Munic√≠pios e estados
- Regi√µes geogr√°ficas
- Rotas e trajetos
- Altitudes e eleva√ß√µes
- Limites territoriais
- Pontos de refer√™ncia
"""
        }
    
    def gerar_prompt_principal(self, texto: str) -> str:
        """
        Gera o prompt principal para extra√ß√£o m√°xima
        
        Args:
            texto: Texto a ser analisado
            
        Returns:
            Prompt formatado pronto para uso
        """
        return self.prompt_base.format(texto=texto)
    
    def gerar_prompt_contextualizado(self, texto: str, contexto: str = "ferroviario") -> str:
        """
        Gera prompt com contexto espec√≠fico
        
        Args:
            texto: Texto a ser analisado
            contexto: Tipo de contexto ('ferroviario', 'financeiro', 'geografico')
            
        Returns:
            Prompt contextualizado pronto para uso
        """
        prompt_base = self.gerar_prompt_principal(texto)
        
        if contexto in self.contextos_especializados:
            contexto_especifico = self.contextos_especializados[contexto]
            prompt_contextualizado = f"{contexto_especifico}\n\n{prompt_base}"
            return prompt_contextualizado
        
        return prompt_base
    
    def extrair_dados_maximos(self, texto: str, contexto: str = "ferroviario") -> Dict[str, Any]:
        """
        M√©todo exemplo para integra√ß√£o com LLM
        
        Args:
            texto: Texto a ser analisado
            contexto: Contexto espec√≠fico
            
        Returns:
            Dicion√°rio com dados estruturados (simulado)
        """
        prompt = self.gerar_prompt_contextualizado(texto, contexto)
        
        # AQUI VOC√ä INTEGRARIA COM SEU LLM PREFERIDO
        # resultado = llm.completar(prompt)
        # return json.loads(resultado)
        
        # Exemplo de estrutura de retorno
        return {
            "prompt_usado": prompt,
            "status": "pronto_para_llm",
            "instrucoes": "Envie o prompt para seu LLM e processe o resultado JSON"
        }
    
    def validar_resultado(self, resultado: Dict[str, Any]) -> Dict[str, Any]:
        """
        Valida e melhora o resultado da extra√ß√£o
        
        Args:
            resultado: Resultado da extra√ß√£o do LLM
            
        Returns:
            Resultado validado e melhorado
        """
        metricas = {
            "completude": 0.0,
            "precisao": 0.0,
            "consistencia": 0.0,
            "validacoes": []
        }
        
        # Valida√ß√µes b√°sicas
        if "dados_identificados" in resultado:
            metricas["completude"] += 0.3
        if "estruturas_detectadas" in resultado:
            metricas["completude"] += 0.3
        if "padroes_identificados" in resultado:
            metricas["completude"] += 0.2
        if "metadados_contextuais" in resultado:
            metricas["completude"] += 0.2
        
        # Adicionar m√©tricas ao resultado
        resultado["metricas_qualidade"] = metricas
        
        return resultado

# Exemplo de uso
def exemplo_uso():
    """Demonstra como usar o prompt de extra√ß√£o m√°xima"""
    
    extrator = PromptExtracao()
    
    # Texto exemplo
    texto_exemplo = """
    FER-001 - Linha Metropolitana BH-Contagem
    Extens√£o: 32,5 km
    Bitola: M√©trica (1,00m)
    Esta√ß√µes: 15 paradas
    Velocidade: 80 km/h
    Capacidade: 1.200 passageiros por composi√ß√£o
    Tarifa: R$ 4,50 (econ√¥mica) / R$ 6,75 (executiva)
    Demanda: 45.000 passageiros/dia
    Receita anual: R$ 73.500.000
    Investimento: R$ 2.8 bilh√µes
    Munic√≠pios: Belo Horizonte, Contagem, Betim
    """
    
    # Gerar prompt
    prompt = extrator.gerar_prompt_contextualizado(texto_exemplo, "ferroviario")
    
    print("üöÄ PROMPT GERADO:")
    print("=" * 50)
    print(prompt)
    print("=" * 50)
    print("\nüìã INSTRU√á√ïES:")
    print("1. Copie o prompt acima")
    print("2. Envie para seu LLM preferido (GPT, Claude, etc.)")
    print("3. Processe o resultado JSON")
    print("4. Use extrator.validar_resultado() para validar")
    
    return prompt

if __name__ == "__main__":
    exemplo_uso()
